name: Version release

env:
  PYTHON_VERSION: 3.12.3
  GCC_MAJOR_VERSION: 12
  CONAN_REQUEST_TIMEOUT: 300

on:
  workflow_dispatch:


jobs:
    # build:
    #     runs-on: ubuntu-latest

    #     outputs:
    #         package_whl_file: ${{ steps.build_package.outputs.package_whl_file }}

    #     steps:
    #     - name: Checkout code
    #       uses: actions/checkout@v4

    #     - name: Set up Python
    #       uses: actions/setup-python@v5
    #       with:
    #         python-version: ${{ env.PYTHON_VERSION }}

    #     - name: Install GCC ${{ env.GCC_MAJOR_VERSION }}
    #       run: sudo apt install gcc-${{ env.GCC_MAJOR_VERSION }} g++-${{ env.GCC_MAJOR_VERSION }}

    #     - name: Clone discopygal
    #       run: git clone https://${{ secrets.MY_GITHUB_PAT }}@github.com/TAU-CGL/discopygal.git

    #     - name: Preparing requirements
    #       run: |
    #             rm requirements.txt
    #             pip install pipenv
    #             CC=gcc-${{ env.GCC_MAJOR_VERSION }} CXX=g++-${{ env.GCC_MAJOR_VERSION }} pipenv install --python $(which python) --dev --verbose
    #       working-directory: ./discopygal

    #     - name: Build package
    #       id: build_package
    #       run: |
    #             pipenv run python scripts/build_package.py
    #             echo "package_whl_file=$(basename `ls dist/*.whl`)" >> $GITHUB_OUTPUT
    #       working-directory: ./discopygal

    #     - name: Upload Discopygal package
    #       uses: actions/upload-artifact@v4
    #       with:
    #         name: package
    #         path: discopygal/dist/

    #     - name: Build docs
    #       run: |
    #             sudo apt install texlive-latex-extra dvipng
    #             pipenv run make clean
    #             pipenv run make html
    #       working-directory: ./discopygal/docs

    #     - name: Upload docs
    #       uses: actions/upload-artifact@v4
    #       with:
    #         path: discopygal/docs/_build/html
    #         name: html_docs

    check:
        runs-on: ${{ matrix.os }}
        # needs: build
        strategy:
            fail-fast: false
            matrix:
                # os: [ubuntu-latest, windows-latest, macos-latest]
                os: [macos-latest]
                # os: [ubuntu-latest]
                # python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]
                python-version: ["3.10"]

        steps:
        - name: Checkout code
          uses: actions/checkout@v4

        - name: Set up Python ${{ matrix.python-version }}
          uses: actions/setup-python@v5
          with:
              python-version: ${{ matrix.python-version }}

        - name: Install GCC ${{ env.GCC_MAJOR_VERSION }}
          if: runner.os == 'Linux'
          run:  |
                 sudo apt install gcc-${{ env.GCC_MAJOR_VERSION }} g++-${{ env.GCC_MAJOR_VERSION }}
                 echo "CC=gcc-${{ env.GCC_MAJOR_VERSION }}" >> $GITHUB_ENV
                 echo "CXX=g++-${{ env.GCC_MAJOR_VERSION }}" >> $GITHUB_ENV

        - name: Set compiler for macOS
          if: runner.os == 'macOS'
          run:  |
                  pip install pyqt5
                  # xcode-select --install
                  echo `uname -m`
                  sudo xcode-select -s /Applications/Xcode.app/Contents/Developer
                  export SDK_PATH=$(xcrun --sdk macosx --show-sdk-path)
                  echo "SDK_PATH=$SDK_PATH"
                  echo "CXXFLAGS=-isysroot $SDK_PATH" >> $GITHUB_ENV
                  echo "CPPFLAGS=-isysroot $SDK_PATH" >> $GITHUB_ENV
                  echo "CMAKE_OSX_SYSROOT=$SDK_PATH" >> $GITHUB_ENV
                  echo "CMAKE_OSX_ARCHITECTURES=arm64" >> $GITHUB_ENV
                  echo "CMAKE_VERBOSE_MAKEFILE=ON" >> $GITHUB_ENV
                  echo "CONAN_DOWNLOAD_TIMEOUT=300" >> $GITHUB_ENV
                  echo "CC=clang" >> $GITHUB_ENV
                  echo "CXX=clang++" >> $GITHUB_ENV

                  mkdir -p ~/.conan2/profiles
                  echo """
                  [settings]
                  os=Macos
                  arch=armv8
                  compiler=apple-clang
                  compiler.cppstd=gnu17
                  compiler.version=15
                  compiler.libcxx=libc++
                  build_type=Release
                  
                  [conf]
                  tools.apple:sdk_path=$SDK_PATH
                  tools.build:sysroot=$SDK_PATH
                  """ > ~/.conan2/profiles/default
                  
                  echo "core.net.http:timeout=600" >> ~/.conan2/global.conf
                  brew install boost
                      # [options]
                      # boost/*:without_locale=True
                      # boost/*:without_stacktrace_backtrace=True
                      #  tools.build:sharedlinkflags=[\"-arch\", \"arm64\"]
                      #  tools.build:exelinkflags=[\"-arch\", \"arm64\"]
                      #  tools.build:cxxflags=[\"-arch\", \"arm64\"]
                      # echo DYLD_LIBRARY_PATH=$CONAN_BOOST_ROOT/lib:$DYLD_LIBRARY_PATH >> $GITHUB_ENV
                      
        # - name: Download discopygal whl
        #   uses: actions/download-artifact@v4
        #   with:
        #     name: package

        - name: Install Discopygal
          # run: pip install -v ${{ needs.build.outputs.package_whl_file }}
          # run: pip install -v discopygal_taucgl-1.4.1-py3-none-any.whl
          # run: pip install -v git+https://bitbucket.org/taucgl/cgal-python-bindings@fbd42cc5fd4751f69825cda909d3ce098e575316 --config-settings=cmake.define.CMAKE_VERBOSE_MAKEFILE=ON
          run: pip install -v git+https://bitbucket.org/taucgl/cgal-python-bindings@fix_compilation_for_macos --config-settings=cmake.define.CMAKE_VERBOSE_MAKEFILE=ON

        # - name: Clone discopygal
        #   run: git clone https://${{ secrets.MY_GITHUB_PAT }}@github.com/TAU-CGL/discopygal.git

        # - name: print conan profile
        #   if: failure()
        #   run: cat ~/.conan2/profiles/default

        - name: Install test dependencies
          run: |
                install_name_tool -change @rpath/libboost_log_setup.dylib \
                  /usr/lib/libc++.1.dylib \
                  /Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/CGALPY/CGALPY.cpython-310-darwin.so
                otool -L /Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/CGALPY/CGALPY.cpython-310-darwin.so
                python -c "import CGALPY as CGALPY; print(CGALPY)"
           #     pip install pytest pyautogui networkx

        # - name: Run tests
        #   if: runner.os != 'Windows'
        #   run: xvfb-run -a pytest -v ./tests
        #   working-directory: ./discopygal

        # - name: Run tests
        #   run: pytest -v ./tests -m sanity
        #   working-directory: ./discopygal

        # - name: Upload docs
        #   uses: actions/upload-artifact@v4
        #   with:
        #     path: 
